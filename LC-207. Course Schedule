class Solution {
    class Edge {
        int src;
        int dest;
        Edge(int s, int d) {
            this.src = s;
            this.dest = d;
        }
    }

    public static boolean cycle(ArrayList<Edge>[] g, boolean seen[], boolean st[], int src) {
        seen[src] = true;
        st[src] = true;
        for (int i = 0; i < g[src].size(); i++) {
            Edge e = g[src].get(i);
            if (st[e.dest]) {
                return true;
            } else if (!seen[e.dest] && cycle(g, seen, st, e.dest)) {
                return true;
            }
        }
        st[src] = false;
        return false;
    }

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        boolean seen[] = new boolean[numCourses];
        boolean st[] = new boolean[numCourses];
        ArrayList<Edge>[] g = new ArrayList[numCourses];
        for (int i = 0; i < numCourses; i++) {
            g[i] = new ArrayList<>();
        }
        for (int[] arr : prerequisites) {
            int src = arr[1];
            int dest = arr[0];
            g[src].add(new Edge(src, dest));
        }
        for (int i = 0; i < numCourses; i++) {
            if (!seen[i]) {
                if (cycle(g, seen, st, i)) {
                    return false;
                }
            }
        }
        return true;
    }
}
