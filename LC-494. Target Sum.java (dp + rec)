//>>>>>>>>>>>>>>> Rec <<<<<<<<<<<<<<<
class Solution {
    public int help(int arr[], int trg , int idx, int sum , int curr){
        if(idx == arr.length){
            int s2 = sum - 2*curr;
            if(s2==trg) return 1;
            return 0;
        }
        return help(arr,trg, idx+1, sum, curr+arr[idx]) + help(arr,trg, idx+1, sum, curr);
    }
    public int findTargetSumWays(int[] nums, int target) {
        int sum =0;
        for(int nm : nums){
            sum += nm;
        }
        return help(nums, target, 0, sum,0);
    }
}
//>>>>>>>>> DP <<<<<<<<<<<<<
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length, sum =0;


        for(int nm : nums) sum += nm;
        if(Math.abs(target) > sum ) return 0;
        if(((sum + target) & 1) != 0) return 0;
        int trg = (sum + target)/2;
        int dp[][] = new int[n+1][trg+1];
        dp[0][0] =1;
       
        for(int i=1; i<=n; i++){
            for(int j=0; j<=trg; j++){
                dp[i][j] = dp[i-1][j];
                if(nums[i-1]<=j){
                    dp[i][j] += dp[i-1][j-nums[i-1]];
                }
            }
        }
        return dp[n][trg];
    }
}
