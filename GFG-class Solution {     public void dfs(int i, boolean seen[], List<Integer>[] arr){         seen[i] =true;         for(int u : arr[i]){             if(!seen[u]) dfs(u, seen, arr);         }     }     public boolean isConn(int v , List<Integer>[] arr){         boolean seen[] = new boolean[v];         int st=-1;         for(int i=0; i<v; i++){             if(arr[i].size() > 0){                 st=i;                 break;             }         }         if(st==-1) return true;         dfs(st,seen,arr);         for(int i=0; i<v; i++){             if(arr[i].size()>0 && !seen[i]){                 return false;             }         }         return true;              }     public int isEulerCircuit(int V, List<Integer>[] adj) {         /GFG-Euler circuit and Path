class Solution {
    public void dfs(int i, boolean seen[], List<Integer>[] arr){
        seen[i] =true;
        for(int u : arr[i]){
            if(!seen[u]) dfs(u, seen, arr);
        }
    }
    public boolean isConn(int v , List<Integer>[] arr){
        boolean seen[] = new boolean[v];
        int st=-1;
        for(int i=0; i<v; i++){
            if(arr[i].size() > 0){
                st=i;
                break;
            }
        }
        if(st==-1) return true;
        dfs(st,seen,arr);
        for(int i=0; i<v; i++){
            if(arr[i].size()>0 && !seen[i]){
                return false;
            }
        }
        return true;
        
    }
    public int isEulerCircuit(int V, List<Integer>[] adj) {
        // code here
        if(!isConn(V, adj)) return 0;
        int odd =0;
        for(int i=0; i<V; i++){
            if(adj[i].size() %2 !=0) odd++;
        }
        if(odd == 0) return 2;
        if(odd == 2) return 1;
        return 0;
    }
}
