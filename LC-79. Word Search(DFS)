class Solution {
    public boolean dfs(char[][] board, String word, int idx, int r, int c) {
        // Base cases
        if (idx == word.length()) return true;
        if (r < 0 || c < 0 || r >= board.length || c >= board[0].length || board[r][c] != word.charAt(idx)) {
            return false;
        }

        // Mark the cell as visited by temporarily modifying it
        char temp = board[r][c];
        board[r][c] = '#';

        // Explore in 4 directions
        boolean found = dfs(board, word, idx + 1, r + 1, c)
                     || dfs(board, word, idx + 1, r - 1, c)
                     || dfs(board, word, idx + 1, r, c + 1)
                     || dfs(board, word, idx + 1, r, c - 1);

        // Backtrack: restore the character
        board[r][c] = temp;

        return found;
    }

    public boolean exist(char[][] board, String word) {
        int rows = board.length, cols = board[0].length;
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (dfs(board, word, 0, r, c)) {
                    return true;
                }
            }
        }
        return false;
    }
}
