class Solution {
    public static int dfs(int grid[][], boolean seen[][],int r, int c){
        if(r<0 || c<0 || r>=grid.length || c>= grid[0].length || seen[r][c] || grid[r][c] == 0) return 0;
        seen[r][c] = true;
        int area = 1;
        area += dfs(grid, seen, r+1,c);
        area += dfs(grid, seen, r-1,c);
        area += dfs(grid, seen, r,c+1);
        area += dfs(grid, seen, r,c-1);
        return area;
    }
    public int maxAreaOfIsland(int[][] grid) {
        boolean seen[][] = new boolean[grid.length][grid[0].length];
        
        int max =0;
        for(int i=0; i<grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
                if(!seen[i][j] && grid[i][j] == 1){
                    int area = dfs(grid, seen, i,j);
                    max = Math.max(area, max);
                }
            }
        }
        return max;

    }
}
