// First Approach (But not ful fill entire logic for question)
/*
class Solution {
    public int totalFruit(int[] fruits) {
        HashMap<Integer, Integer> hm = new HashMap<>();
        for(int i=0; i<fruits.length; i++){
            hm.put(fruits[i], hm.getOrDefault(fruits[i],0)+1);
        }
       PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        for(int n : hm.values()){
            pq.add(n);
        }
        int c=0, k=0;
        for(int num : pq){
            c+=num;
            k++;
            if(k==2) return c;
        }
        return -1;
    }
}
*/
class Solution {
    public int totalFruit(int[] fruits) {
        HashMap<Integer, Integer> hm= new HashMap<>();
        int max =0, left =0;
        for(int i=0; i<fruits.length; i++){
            hm.put(fruits[i], hm.getOrDefault(fruits[i],0)+1);
            while(hm.size() >2){
                hm.put(fruits[left],hm.get(fruits[left])-1);
                if(hm.get(fruits[left]) == 0){
                     hm.remove(fruits[left]);
                }
                left++;
            }
            max = Math.max(max, i-left+1);
        }
            return max;
    }
}
